name: Build OpenWrt

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - '.config'
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: started

env:
  CUSTOM_SCRIPT: ./common/diy-script.sh
  UPLOAD_RELEASE: true
  UPLOAD_FIRMWARE: true
  UPLOAD_BIN_DIR: false
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64]
        
    steps:
    - name: Checkout
      uses: actions/checkout@main
  
    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
    
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%Y')" >> $GITHUB_ENV
    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        if [ -f "common/feeds.conf" ]; then
        (
          mv common/feeds.conf openwrt/
        )
        fi       
        if [ -f "${{matrix.target}}/feeds.conf" ]; then
        (
          mv ${{matrix.target}}/feeds.conf openwrt/
        )
        fi
      
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/staging_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
    - name: Load custom configuration1
      run: |
        chmod +x $CUSTOM_SCRIPT
        cd openwrt
        source $GITHUB_WORKSPACE/$CUSTOM_SCRIPT && Diy-Part1
    - name: Load custom configuration2
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        echo "Apply files..."
        if [ -n "$(ls -A "common/files" 2>/dev/null)" ]; then
         cp -rf common/files files
        fi
        if [ -n "$(ls -A "${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -rf ${{matrix.target}}/files/* files/
        fi
        if [ -f "common/$DIY_SH" ]; then
        (
          chmod +x common/$DIY_SH
          /bin/bash "common/$DIY_SH"
        )
        fi       
        if [ -f "${{matrix.target}}/$DIY_SH" ]; then
        (
          chmod +x ${{matrix.target}}/$DIY_SH
          /bin/bash "${{matrix.target}}/$DIY_SH"
        )
        fi
         mv ${{matrix.target}}/$CONFIG_FILE .config
        if [ -f "common/default-settings" ]; then
         cp -f common/default-settings package/*/*/default-settings/files/zzz-default-settings
        fi
        if [ -f "${{matrix.target}}/default-settings" ]; then
         cat ${{matrix.target}}/default-settings >> package/*/*/default-settings/files/zzz-default-settings
        fi
        if [ -n "$(ls -A "common/diy" 2>/dev/null)" ]; then
         cp -Rf common/diy/* ./
        fi
        if [ -n "$(ls -A "${{matrix.target}}/diy" 2>/dev/null)" ]; then
         cp -Rf ${{matrix.target}}/diy/* ./
        fi
        if [ -n "$(ls -A "common/patches" 2>/dev/null)" ]; then
        (
          find "common/patches" -type f ! -path 'common/patches/china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward"
        )
        fi
        if [ -n "$(ls -A "${{matrix.target}}/patches" 2>/dev/null)" ]; then
        (
          find "${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward"
        )
        fi
        make defconfig
    - name: Load custom configuration3
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/$CUSTOM_SCRIPT && Diy_Core && Diy-Part2
    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "status=success" >> $GITHUB_ENV
      
    - name: Run After-Compile-OpenWRT Script
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/$CUSTOM_SCRIPT && Diy_Core && Diy-Part3

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_Firmware
        path: openwrt/bin/Firmware
        
    - name: Upload Firmware Directory to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_Bin
        path: openwrt/bin

    - name: Generate Tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "$(date +"%Y%m%d")-AutoUpdate-LEDE" > update_log.txt
        echo "FIRMWARE=openwrt/bin/Firmware" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload Firmware to Github Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: AutoUpdate
        body_path: update_log.txt
        files: ${{ env.FIRMWARE }}/*
        asset: patch

    - name: Remove old Artifacts
      uses: c-hive/gha-remove-artifacts@v1.2.0
      with:
        age: '1 day'
        skip-recent: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
